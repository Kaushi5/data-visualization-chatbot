import os
import pandas as pd
import subprocess

def suggest_visualizations_with_ollama(file_path, model="llama2"):
    """
    Suggest visualizations for the dataset using the Ollama model.

    Args:
        file_path (str): Path to the uploaded dataset.
        model (str): Ollama model to use (default: "llama2").

    Returns:
        str: Visualization suggestions generated by the LLM.
    """
    try:
        # Read dataset for column analysis
        dataset = pd.read_excel(file_path, engine="openpyxl")
        columns = dataset.columns.tolist()

        # Generate a prompt for visualization suggestions
        prompt = (
            "Based on the following dataset, suggest appropriate visualizations:\n"
            "- Include chart types (e.g., Bar Chart, Scatter Plot, Line Chart).\n"
            "- Specify relevant columns for X and Y axes.\n"
            "- Provide a high-level explanation of each visualization.\n\n"
            f"Dataset Columns:\n{', '.join(columns)}\n\n"
            "Consider trends, distributions, and correlations."
        )

        # Call Ollama CLI
        ollama_command = ["ollama", "run", model]
        process = subprocess.run(
            ollama_command,
            input=prompt,
            text=True,
            capture_output=True,
            encoding="utf-8",
        )

        # Check for errors
        if process.returncode != 0:
            raise Exception(f"Ollama Error: {process.stderr.strip()}")

        # Return the model's response
        llm_response = process.stdout.strip()
        return llm_response

    except Exception as e:
        raise Exception(f"Error interacting with Ollama or suggesting visualizations: {str(e)}")

def generate_visualization_suggestions(file_path):
    """
    Handles the process of generating visualization suggestions.

    Args:
        file_path (str): Path to the uploaded dataset.

    Returns:
        str: Visualization suggestions.
    """
    try:
        # Validate the dataset file path
        if not os.path.exists(file_path):
            return "No dataset found. Please upload a dataset first."

        # Suggest visualizations using Ollama
        suggestions = suggest_visualizations_with_ollama(file_path)
        return suggestions

    except Exception as e:
        return f"An error occurred while suggesting visualizations: {str(e)}"
